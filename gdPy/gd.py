#todo: think of a better name
from subprocess import *
import subprocess , ConfigParser

CONFIG_FILE = "init.ini"


class GDBSession(object):
    """docstring for GDBSession"""
    def __init__(self, path):
        super(GDBSession, self).__init__()
        self.session = subprocess.Popen(['gdb','-q', path] ,stdin= PIPE)

    def interact(self):
        """docstring for interact"""

        cmd =  "\n"
#Todo: use the split function to check the first word of the command against a list of commands
        while cmd != "q\n":
            self.session.stdin.write(cmd)
            cmd = raw_input() + "\n"

#todo: add function to create notes


#todo: add a fcunction to execute a list of commands

    def addBreakPoint(self,bp,bpType):
        """docstring for addbp"""
        if type(bp) is list:
            if bpType == 'func':
                for i in range(0,len(bp)):
                    if bp[i]:
                        self.session.stdin.write("b " + bp[i] + '\n')
            elif bpType == 'addr':
                for i in range(0,len(bp)):
                    if bp[i]:
                        self.session.stdin.write("b *" + bp[i] + '\n')
        elif type(bp) is str:
            if bpType == 'func':
                self.session.stdin.write("b " + bp + '\n')
            elif bpType == 'addr':
                self.session.stdin.write("b *" + bp + '\n')

#todo: look into extended interpolation so we won't need commas
def getList(configFile,section,var):
    return list(configFile.get(section,var).split('\n'))

#todo: create a function that creates an init.ini file if prompted by a command line arg
configFile = ConfigParser.ConfigParser()
configFile.read(CONFIG_FILE)
gdbSession = GDBSession(configFile.get('File','path'))
gdbSession.addBreakPoint(getList(configFile,'BreakPoints','Functions'),'func')
gdbSession.addBreakPoint(getList(configFile,'BreakPoints','Addrs'),'addr')
gdbSession.interact()
