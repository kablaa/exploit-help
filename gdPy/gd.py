from subprocess import *
import subprocess , ConfigParser, sys,readline

CONFIG_FILE = "init.ini"
textEditor = ""
quitCmds = ['quit','q']
gdbCmds = ['n','next','ni']

class GdbSession(object):
    """docstring for GdbSession"""
    def __init__(self, path):
        super(GdbSession, self).__init__()
        self.session = subprocess.Popen(['gdb','-q', path] ,stdin= PIPE)

    def sendCmd(self,cmd):
        self.session.stdin.write(cmd + '\n')



def openNote():
    if textEditor:
        subprocess.Popen([textEditor,'notes.txt'])
    else:
        print "no text editor"

def handleCommand(session,cmd):
    if len(cmd) > 1:
        if cmd[1] == 'note':
            openNote()
        elif cmd[1] in gdbCmds:
            if len(cmd) > 2:
                try:
                    for i in range(0,int(cmd[2])):
                        session.sendCmd(cmd[1])
                except ValueError:
                    print "try using the right format you dumb shit"
        else:
            return

def interact(session):
    print "Welcome to gdPy!"
    session.sendCmd('no')
    while True:
        cmd = raw_input("gdPy!     ")
        parsedCmd = cmd.split(' ')
        if parsedCmd[0] == 'gdpy':
            handleCommand(session,parsedCmd)
        elif parsedCmd[0] in quitCmds:
            break
        else:
            if cmd:
                session.sendCmd(cmd)
            else:
                session.sendCmd("no")


def addBreakPoint(session,bp,bpType):
    if type(bp) is list:
        if bpType == 'func':
            for i in range(0,len(bp)):
                if bp[i]:
                    session.sendCmd('b ' + bp[i])
        elif bpType == 'addr':
            for i in range(0,len(bp)):
                if bp[i]:
                    session.sendCmd("b *" + bp[i])
    elif type(bp) is str:
        if bpType == 'func':
            session.sendCmd("b " + bp )
        elif bpType == 'addr':
            session.sendCmd("b *" + bp )


def getList(parser,section,var):
    return list(parser.get(section,var).split('\n'))

def init(config):
    print "creating init.ini"
    initFile = open(CONFIG_FILE,'w')
    config.add_section('File')
    config.add_section('BreakPoints')
    config.add_section('Notes')
    config.set('File','path',"")
    config.set('BreakPoints','Functions',"")
    config.set('BreakPoints','Addrs',"")
    config.set('Notes','editor',"gedit")
    config.write(initFile)
    initFile.close()


parser = ConfigParser.ConfigParser()
if len(sys.argv) > 1:
    if sys.argv[1] == 'init':
        init(parser)
else:
    if parser.read(CONFIG_FILE):

        import os
        histfile = os.path.join(os.path.expanduser("."), ".gdPyHistory")
        try:
            readline.read_history_file(histfile)
            readline.set_history_length(1000)
        except IOError:
            pass
        import atexit
        atexit.register(readline.write_history_file, histfile)

        gdbSession = GdbSession(parser.get('File','path'))
        textEditor= parser.get('Notes','editor')
        addBreakPoint(gdbSession, getList(parser,'BreakPoints','Functions'), 'func')
        addBreakPoint(gdbSession, getList(parser,'BreakPoints','Addrs') , 'addr')
        interact(gdbSession)

        del os, histfile
    else:
        print CONFIG_FILE + " not found. Run: python gd.py init"
