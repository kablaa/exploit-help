#todo: think of a better name
from subprocess import *
import subprocess , ConfigParser, sys

CONFIG_FILE = "init.ini"

class GdPySession(object):
    """docstring for GdPySession"""

    quit = ['quit','q']
    commands = ['n','next','ni']
    textEditor = ""

    def __init__(self, path):
        super(GdPySession, self).__init__()
        self.session = subprocess.Popen(['gdb','-q', path] ,stdin= PIPE)

    def setTextEditor(self,editor):
        """docstring for setEditor"""
        GdPySession.textEditor = editor

    @classmethod
    def openNote(self):
        """docstring for openNote"""
        if GdPySession.textEditor:
            subprocess.Popen([GdPySession.textEditor,'notes.txt'])
        else:
            print "no text editor"



    @classmethod
    def handleCommand(self,session,cmd):
        """docstring for execCommad"""
        if len(cmd) > 1:
            if cmd[1] == 'note':
                GdPySession.openNote()
            elif cmd[1] in GdPySession.commands:
                if len(cmd) > 2:
                    try:
                        for i in range(0,int(cmd[2])):
                            session.stdin.write(cmd[1] + '\n')
                    except ValueError:
                        print "try using the right format you dumb shit"



    def interact(self):
        """docstring for interact"""
        print "Welcome to gdPy!"
        self.session.stdin.write('no\n')
        while True:
            cmd = raw_input().split(' ')
            if cmd[0] == 'gdpy':
                GdPySession.handleCommand(self.session,cmd)
                self.session.stdin.write('no\n')
            elif cmd[0] in GdPySession.quit:
                break
            else:
                self.session.stdin.write(cmd[0] + '\n')



#todo: add a fcunction to execute a list of commands

    def addBreakPoint(self,bp,bpType):

        if type(bp) is list:
            if bpType == 'func':
                for i in range(0,len(bp)):
                    if bp[i]:
                        self.session.stdin.write("b " + bp[i] + '\n')

            elif bpType == 'addr':
                for i in range(0,len(bp)):
                    if bp[i]:
                        self.session.stdin.write("b *" + bp[i] + '\n')
        elif type(bp) is str:
            if bpType == 'func':
                self.session.stdin.write("b " + bp + '\n')
            elif bpType == 'addr':
                self.session.stdin.write("b *" + bp + '\n')


#todo: look into extended interpolation so we won't need commas
def getList(parser,section,var):
    return list(parser.get(section,var).split('\n'))

def init(config):
    print "creating init.ini"
    initFile = open(CONFIG_FILE,'w')
    config.add_section('File')
    config.add_section('BreakPoints')
    config.add_section('Notes')
    config.set('File','path',"")
    config.set('BreakPoints','Functions',"")
    config.set('BreakPoints','Addrs',"")
    config.set('Notes','editor',"gedit")
    config.write(initFile)
    initFile.close()


parser = ConfigParser.ConfigParser()
if len(sys.argv) > 1:
    if sys.argv[1] == 'init':
        init(parser)
else:
    if parser.read(CONFIG_FILE):
        gdbSession = GdPySession(parser.get('File','path'))
        editor = parser.get('Notes','editor')
        if editor:
            gdbSession.setTextEditor(editor)
        gdbSession.addBreakPoint(getList(parser,'BreakPoints','Functions'),'func')
        gdbSession.addBreakPoint(getList(parser,'BreakPoints','Addrs'),'addr')
        gdbSession.interact()
    else:
        print CONFIG_FILE + " not found. Run: python gd.py init"
